 ListNode* reverse(ListNode* head){
        ListNode* prev=NULL;
        ListNode*curr=head;
        while(curr!=NULL){
            ListNode* fwd=curr->next;
            curr->next=prev;
            prev=curr;
            curr=fwd;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {

        // method 1 uisng array data structure

        // vector<int> arr;
        // while(head){
        //     arr.push_back(head->val);
        //     head=head->next;
        // }

        // for(int i =0;i<arr.size()/2;i++){
        //     if(arr[i]!=arr[arr.size()-i-1]){
        //         return false;
        //     }
            
        // }return true;
        


        // method 2
        if(head==NULL ||head->next==NULL){
            return true;
        }
        //Your code here
        // reverse the liked list after middle and start comparing
        ListNode* slow=head;
        ListNode* fast=head;
        
        while(fast->next&&fast->next->next){
             fast=fast->next->next;
            slow=slow->next;
           
        }
        slow->next = reverse(slow->next);
        slow=slow->next;
        
        ListNode* temp=head;
        
        while(slow!=NULL){
            if(temp->val != slow->val){
                return false;
            }else{
            temp=temp->next;
            slow=slow->next;
        }}
        return true;
        

    }
